(progn
(setq counter-successfully 0)
(setq counter-error 0)
(setq counter-arifmetik 0))

(defun what-is-result (action)
  (save-excursion
    (let* ((m-one (random 10))
	   (m-two (random 10))
	   (m-result (* m-one m-two))
	   (number-one (random 100))
	   (number-two (random 100))
	   (add-result (+ number-one number-two))
	   (substract-result (- number-one number-two))
	   (multiply-result (* number-one number-two)))
      (cond ((equal action '+)
	     (insert (format "%d + %d = " number-one number-two))
	     (setq your-result (read-number "Твой результат? "))
	     (cond ((equal add-result your-result) (print '(successfully))
		    (insert (format "SUCCESSFULLY! %d " your-result))
		    (setq counter-successfully (+ 1 counter-successfully)))
		   (t (insert (format " ERROR! правильно будет - %s " add-result))
		      (setq counter-error (+ 1 counter-error)))))
	    ((equal action '*)
	     (insert (format "%d * %d = " m-one m-two))
	     (setq your-result (read-number "Твой результат? "))
	     (cond ((equal m-result your-result) (print '(successfully))
		    (insert (format "SUCCESSFULLY! %d " your-result))
		    (setq counter-successfully (+ 1 counter-successfully)))
		   (t (insert (format " ERROR! правильно будет - %s " m-result))
		      (setq counter-error (+ 1 counter-error)))))
	    ((equal action 'info)
	     (print (format "Твой результат - из вариантов %d, правильно - %d. Ошибся - %d " counter-arifmetik counter-successfully counter-error))
	     (if (> counter-error 5)
		 (print '(Слабый уровень владения!))))
	    ((equal action '-)
	     (insert (format "%d - %d = " number-one number-two))
	     (setq your-result (read-number "Твой результат? "))
	     (cond ((equal substract-result your-result) (print '(successfully))
		    (insert (format "SUCCESSFULLY! %s " your-result))
		    (setq counter-successfully (+ 1 counter-successfully)))
		   (t (insert (format " ERROR! правильно будет - %s " substract-result))
		      (setq counter-error (+ 1 counter-error)))))
	    (t
	     (print '(invalid choice symbol)))))
    (setq counter-arifmetik (+ 1 counter-arifmetik))))

(defun arifmethika-kach () "арифметическая качалка"
       (let ((choice (read-string "press x for exit..."))
	     (randomizer (random 3)))
	 (unless (string= "x" choice)
	   (cond ((equal randomizer 0)
		  (what-is-result '+))
		 ((equal randomizer 1)
		  (what-is-result '-))
 		 ((equal randomizer 2)
		  (what-is-result '*))
		 ((equal randomizer 3)
		  (what-is-result 'info)))
	   (arifmethika-kach))))

;;;(arifmethika-kach)


